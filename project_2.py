# -*- coding: utf-8 -*-
"""project 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zU-FeZuDW9b9vKH0C-UfrzJ0uuxZqNMZ

# **Servo Prediction using Linear Regression**

##### **What is Servo**: in control engineering a servomechanism,usually shortened to servo , is an automatic device that uses error-sensing negative feedback to correct the action of mechanism. On dispalcement controlled application ,it usually includes a built-in encoder or other position feedback mechanism to ensure the output is achieving the disered effect.

# **Import library ****
"""

import numpy as np

import pandas as pd

"""import csv as DataFrame"""

df = pd.read_csv(r'https://github.com/YBI-Foundation/Dataset/raw/main/Servo%20Mechanism.csv')

"""# **Get the first five rows of dataframe**"""

df.head()

"""# **Get information of Dataframe**"""

df.info()

"""# **Get shape of dataframe ****"""

df.shape

"""# **Get summary statistics**"""

df.describe()

df.columns

"""# **Get shape of dataframe**"""

df.shape

"""# **Get categories and counts of categorical variables**"""

df[['Motor']].value_counts()

df[['Screw']].value_counts()

"""# **Get Encoding of categroical Features**"""

df.replace({ 'Motor' : {'A' : 0,'B' : 1, 'C' : 2, 'D' :3 , 'E' :4}},inplace=True)

df.replace ({'Screw':{'A':0,'B':1,'C':2,'D':3,'E':4}},inplace=True)

"""# **Define y(dependent or label or target variable) and x(independent or features  or attribute variable)**"""

y =df['Class']

y.shape

y

x =df[['Motor','Screw','Pgain','Vgain']]

x= df.drop('Class',axis=1)

x.shape

x

"""# **Get Train Test Split**"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test =train_test_split(x,y,test_size =0.3,random_state=2529)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

"""# **Get Model Train**"""

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

lr.fit(x_train, y_train)

"""# **Get Model Prediction**"""

y_pred = lr.predict(x_test)

y_pred.shape

y_pred

"""# **Get Model Evaluation**"""

from sklearn.metrics import mean_squared_error,mean_absolute_error,r2_score

, mean_squared_error(y_test,y_pred)

mean_absolute_error(y_test,y_pred)

r2_score(y_test,y_pred)

"""# Get Visualization of actual vs Predicted Results"""

import matplotlib.pyplot as plt
plt.scatter(y_test,y_pred)
plt.xlabel("Actual")
plt.ylabel("Predicted")
plt.title('Actual vs Predicted')
plt.show()

"""# **Get Future predictions**

# let select random sample from existing dataset as new value
## step to follow
1. Exact a random row using sample function
2.Sepreate x and y
3.Standardize x
4.Predict
"""

x_new = df.sample(1)

x_new

x_new.shape

x_new = x_new.drop('Class',axis=1)

x_new

x_new.shape

y_pred_new =lr.predict(x_new)

y_pred_new

